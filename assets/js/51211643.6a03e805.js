"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[900],{6953:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=s(4848),n=s(8453);const i={slug:"rag-and-guardrails",title:"The Smart Path: How RAG and Guardrails Power Domain-Specific AI",authors:["dan"],tags:["openassisstants","ai","rag","guardrails","llm"]},r=void 0,o={permalink:"/openassistants/blog/rag-and-guardrails",editUrl:"https://github.com/definitive-io/openassistants/blog/2023-12-19-rag-and-guardrails/index.md",source:"@site/blog/2023-12-19-rag-and-guardrails/index.md",title:"The Smart Path: How RAG and Guardrails Power Domain-Specific AI",description:"The integration of AI chatbots into customer service showcase technological advancement, yet they present unique challenges. A vivid example comes from a chatbot deployed at a Chevrolet dealership in Watsonville, which encountered an unusual request for a Python script to solve fluid dynamics equations. This incident highlights the necessity for precise AI applications, an area where OpenAssistants\u2019 platform excels with its Retrieval-Augmented Generation (RAG) and guardrail features.",date:"2023-12-19T00:00:00.000Z",formattedDate:"December 19, 2023",tags:[{label:"openassisstants",permalink:"/openassistants/blog/tags/openassisstants"},{label:"ai",permalink:"/openassistants/blog/tags/ai"},{label:"rag",permalink:"/openassistants/blog/tags/rag"},{label:"guardrails",permalink:"/openassistants/blog/tags/guardrails"},{label:"llm",permalink:"/openassistants/blog/tags/llm"}],readingTime:1.28,hasTruncateMarker:!1,authors:[{name:"Dan Loman",title:"Core contributor of OpenAssistants",url:"https://github.com/dloman118",imageURL:"https://avatars.githubusercontent.com/u/99347459?v=4",key:"dan"}],frontMatter:{slug:"rag-and-guardrails",title:"The Smart Path: How RAG and Guardrails Power Domain-Specific AI",authors:["dan"],tags:["openassisstants","ai","rag","guardrails","llm"]},unlisted:!1,nextItem:{title:"Assistants not Agents",permalink:"/openassistants/blog/assistants-not-agents"}},c={authorsImageUrls:[void 0]},l=[{value:"Domain-Specific AI Through RAG",id:"domain-specific-ai-through-rag",level:2},{value:"Structuring Interactions with Guardrails",id:"structuring-interactions-with-guardrails",level:2},{value:"Consistent and Accurate Responses",id:"consistent-and-accurate-responses",level:2},{value:"Enhanced Efficiency with Low Latency",id:"enhanced-efficiency-with-low-latency",level:2}];function d(e){const t={h2:"h2",img:"img",p:"p",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"The integration of AI chatbots into customer service showcase technological advancement, yet they present unique challenges. A vivid example comes from a chatbot deployed at a Chevrolet dealership in Watsonville, which encountered an unusual request for a Python script to solve fluid dynamics equations. This incident highlights the necessity for precise AI applications, an area where OpenAssistants\u2019 platform excels with its Retrieval-Augmented Generation (RAG) and guardrail features."}),"\n",(0,a.jsx)("img",{src:"/openassistants/img/chevy_watsonville.jpeg",style:{maxWidth:"400px",width:"100%"}}),"\n",(0,a.jsx)(t.h2,{id:"domain-specific-ai-through-rag",children:"Domain-Specific AI Through RAG"}),"\n",(0,a.jsx)(t.p,{children:"OpenAssistants leverages RAG to ensure chatbots operate within their designated domains. RAG integration allows a Chevrolet dealership's chatbot to access solely automotive-related information, avoiding off-topic interactions and ensuring domain relevance."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Chatbot interaction focused on automotive queries",src:s(8489).A+"",width:"1374",height:"1466"})}),"\n",(0,a.jsx)(t.h2,{id:"structuring-interactions-with-guardrails",children:"Structuring Interactions with Guardrails"}),"\n",(0,a.jsx)(t.p,{children:"OpenAssistants\u2019 guardrails direct user interactions by steering conversations with relevant prompts. This not only streamlines communication but also ensures the chatbot's exchanges remain focused on the dealership's services."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Structured chatbot prompts guiding the user",src:s(8221).A+"",width:"1636",height:"1488"})}),"\n",(0,a.jsx)(t.h2,{id:"consistent-and-accurate-responses",children:"Consistent and Accurate Responses"}),"\n",(0,a.jsx)(t.p,{children:"RAG's retrieval-based approach means the chatbot consistently provides reliable information. It draws from a validated knowledge base, eliminating the risks of generating erroneous responses and maintaining consistency across all interactions."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Chatbot providing consistent, reliable information",src:s(4324).A+"",width:"1648",height:"1498"})}),"\n",(0,a.jsx)(t.h2,{id:"enhanced-efficiency-with-low-latency",children:"Enhanced Efficiency with Low Latency"}),"\n",(0,a.jsx)(t.p,{children:"OpenAssistants optimizes AI chatbots for rapid response times. Focusing on information retrieval rather than generation significantly reduces response latency, boosting customer service speed and efficiency."}),"\n",(0,a.jsx)(t.p,{children:"The Chevrolet dealership scenario highlights how an unrefined AI can yield problematic results. By incorporating RAG and building guardrails, OpenAssistants transforms chatbots into powerful, domain-specific tools, advancing AI-powered workflows across industries."})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8489:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/img1-dc7224a6843ef356253e9c2e5681b919.png"},8221:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/oa_chevy2-ab93af120dfefc8e8439b0198ea09aaa.png"},4324:(e,t,s)=>{s.d(t,{A:()=>a});const a=s.p+"assets/images/oa_chevy3-80bab6c0ff65b5046e3ffd4a9852dbf5.png"},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var a=s(6540);const n={},i=a.createContext(n);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);