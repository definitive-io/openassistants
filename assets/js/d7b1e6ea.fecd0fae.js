"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[586],{7998:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>u});var s=t(5893),i=t(1151);const o={sidebar_position:3},a="Query functions",r={id:"query-functions",title:"Query functions",description:"One of the key ideas in OpenAssistants is the ability to dynamically populate the chat context with dynamic information.",source:"@site/docs/query-functions.md",sourceDirName:".",slug:"/query-functions",permalink:"/openassistants/docs/query-functions",draft:!1,unlisted:!1,editUrl:"https://github.com/definitive-io/openassistants/docs/query-functions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Live demo",permalink:"/openassistants/docs/live-demo"},next:{title:"Extending OpenAssistants",permalink:"/openassistants/docs/category/extending-openassistants"}},c={},u=[];function p(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"query-functions",children:"Query functions"}),"\n",(0,s.jsx)(n.p,{children:"One of the key ideas in OpenAssistants is the ability to dynamically populate the chat context with dynamic information."}),"\n",(0,s.jsxs)(n.p,{children:["One of the ways in which we support that is through the integrated SQL functions, such as the ",(0,s.jsx)(n.code,{children:"DuckDBQueryFunction"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Here's an example YAML that uses the ",(0,s.jsx)(n.code,{children:"DuckDBQueryFunction"})," to pull in data from multiple CSV files that are part of our application."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'name: show_recent_purchases\ndisplay_name: Show recent purchases\ndescription: |\n  Show a list of recent purchases (last 5)\nsample_questions:\n- show recent purchases\nparameters:\n  json_schema:\n    type: object\n    properties: {}\n    required: []\ntype: DuckDBQueryFunction\ndataset: "dummy-data/"\nsqls:\n- |\n  SELECT purchases.id, purchases.product, employees.email\n  FROM "purchases.csv"\n  INNER JOIN "employees.csv" ON purchases.employee = employees.id\n  ORDER BY purchases.id DESC\n  LIMIT 5\nvisualizations: []\nsummarization: \'Describe these purchases\'\n'})}),"\n",(0,s.jsx)(n.p,{children:"The information produced by these queries is part of the conversation after use and can be used by the LLM to call other functions."})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var s=t(7294);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);