"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[796],{8054:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var s=t(5893),i=t(1151);const o={sidebar_position:2},r="DuckDBQueryFunction",c={id:"query-functions/DuckDBQueryFunction",title:"DuckDBQueryFunction",description:"The DuckDBQueryFunction query type leverages integrated SQL functions, which gives OpenAssistants the ability to populate the chat with dynamic information",source:"@site/docs/query-functions/DuckDBQueryFunction.md",sourceDirName:"query-functions",slug:"/query-functions/DuckDBQueryFunction",permalink:"/openassistants/docs/query-functions/DuckDBQueryFunction",draft:!1,unlisted:!1,editUrl:"https://github.com/definitive-io/openassistants/docs/query-functions/DuckDBQueryFunction.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"PythonEvalFunction",permalink:"/openassistants/docs/query-functions/PythonEvalFunction"},next:{title:"Extending OpenAssistants",permalink:"/openassistants/docs/category/extending-openassistants"}},a={},u=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"duckdbqueryfunction",children:"DuckDBQueryFunction"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"DuckDBQueryFunction"})," query type leverages integrated SQL functions, which gives OpenAssistants the ability to populate the chat with dynamic information"]}),"\n",(0,s.jsxs)(n.p,{children:["Here's an example YAML that uses the ",(0,s.jsx)(n.code,{children:"DuckDBQueryFunction"})," to pull in data from multiple CSV files that are part of our application."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"name: show_recent_purchases\ndisplay_name: Show recent purchases\ndescription: |\n  Show a list of recent purchases (last 5)\nsample_questions:\n  - show recent purchases\nparameters:\n  json_schema:\n    type: object\n    properties: {}\n    required: []\ntype: DuckDBQueryFunction\ndataset: 'dummy-data/'\nsqls:\n  - |\n    SELECT purchases.id, purchases.product, employees.email\n    FROM \"purchases.csv\"\n    INNER JOIN \"employees.csv\" ON purchases.employee = employees.id\n    ORDER BY purchases.id DESC\n    LIMIT 5\nvisualizations: []\nsummarization: 'Describe these purchases'\n"})}),"\n",(0,s.jsx)(n.p,{children:"The information produced by these queries is part of the conversation after use and can be used by the LLM to call other functions."}),"\n",(0,s.jsxs)(n.p,{children:["To use, add your .csv files to a folder in the ",(0,s.jsx)(n.code,{children:"fast-api-server"})," repository, reference the folder name in the ",(0,s.jsx)(n.code,{children:"dataset"})," parameter, and write your SQL query in ",(0,s.jsx)(n.code,{children:"sqls"})]})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>r});var s=t(7294);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);